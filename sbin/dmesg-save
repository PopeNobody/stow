#!/usr/bin/perl
#! -*- perl -*- -p
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;


use FindBin qw($Script $Bin);
use lib "$Bin/../lib/perl";

if($< or $>) {
 exec "sudo", readlink("/proc/self/exe"),"$Bin/$Script", @ARGV;
}

use strict;
use warnings;
use autodie qw(:all);
our ($VERSION) = join("-",qw ( 1 0 0 ));
BEGIN {
  $|++; $\="\n";
};
use Nobody::PP qw(ddx dd ppx pp);
use Getopt::WonderBra;
use File::Path;
use Util;
use autodie qw(:all);
use POSIX qw(strftime);
use subs;
sub write_klog(@);
sub test_klog();
sub gzip_append($@);
sub get_filename();
sub goto_dir();
sub version;
sub help;
sub main();
sub serdate();
my $gzip="|gzip -9";
die "no args used" if @ARGV;
main();

sub write_klog(@) {
  local(@_)=@_;
  open(my $klog,">>/dev/kmsg");
  chomp(@_);
  $klog->print(join("\n",@_));
  close($klog);
};
sub goto_dir() {
  for("/var/log/dmesg"){
    last if -d;
    rename "$_", "$_.old" if -e;
    mkpath("/var/log/dmesg");
  }
  chdir("/var/log/dmesg");
}
sub get_filename()
{
  my $new=shift;
  unless(-e "current.gz"){
    my $realfile=join("","dmesg-",serdate(),".gz");
    symlink($realfile,"current.gz");
  };
  return "current.gz";
}
sub help {
  print "usage: $0 [ -a ]";
  print "       -a: append to existing output";
  print "";
}
sub version {
  print "version $VERSION";
}
sub gzip_append($@){
  my ($fn)=shift;
  chomp(@_);
  $_=join("\n",@_);
  open(STDOUT,"$gzip>>$fn");
  print(STDOUT "$_");
  close(STDOUT);
  open(STDOUT,">&STDERR");
}
sub main(){
  open(my $dmesg,"dmesg|");
  exit(0) unless defined($_=<$dmesg>);
  my $fn=get_filename();
  my @dmesg=$_;
  push(@dmesg, <$dmesg>);
  close($dmesg);
  gzip_append($fn,@dmesg);
  my $lines=@dmesg;
  open($dmesg,"dmesg -c|");
  @dmesg=<$dmesg>;
  splice(@dmesg,0,$lines);
  if(@dmesg){
    unshift(@dmesg,"more lines appeared");
    print STDERR "more lines appeared";
    gzip_append($fn,@dmesg);
  }
}
sub serdate()
{
  my @time=gmtime;
  return strftime("%Y%m%d-%H%M%S-gmt", @time);
}
