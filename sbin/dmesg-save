#!/usr/bin/perl
#! -*- perl -*- -p
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

BEGIN {
  use FindBin qw($Script $Bin);
  use lib "$Bin/../lib/perl";
  
  exec "sudo", "$Bin/$Script", @ARGV
    if $< or $>;
}
use strict;
use warnings;
use autodie qw(:all);
our ($VERSION) = join("-",qw ( 1 0 0 ));
BEGIN {
  $|++; $\="\n";
};
use Data::Dump qw(ddx dd ppx pp);
use Getopt::WonderBra;
use Util::IO;

sub version {
  print "version $VERSION";
}
sub help {
  print "usage: $0 [ -a ]";
  print "       -a: append to existing output";
  print "";
}
sub kmsg(@) {
  @_ = $_ unless @_;
  open(my $kmsg,">>/dev/kmsg");
  print $kmsg "$_" for @_;
  close($kmsg);
}
sub dmesg(){
  return suck("dmesg|");
};
sub get_filename($) {
  my $new=shift;
  my ($dir) = "/var/log/dmesg";
  my ($fn);
  mkdir $dir unless -d "$dir";

  unless($new) {
    my @fn=sort glob("$dir/dmesg-*.gz");
    $fn=shift @fn;
  }
  if(defined($fn)) {
    print STDERR "old file: $fn";
  } else {
    $fn=sprintf("$dir/dmesg-%s.gz", map { split } qx(serdate));
    print STDERR "new file: $fn";
  }
  return $fn;
}
sub main(@) {
  kmsg("$0 running (@ARGV)");
  my @dmesg = dmesg();
  my $new=0;
  for(map { "$_" } $dmesg[0]) {
    $new=1 if /^\[[0-9. ]*\] microcode/;
  };
  my $fn=get_filename($new);
  my @omesg;
  my @tools = qw(  lsmod lshw lspci lsusb );
  if($new) {
    open(SHELL,"|/bin/bash 2>&1 >/dev/kmsg");
    close(SHELL);
  } else {
    @omesg=grep { length } split("\n",join("\n",qx(test -e $fn && zcat $fn)));
  };
  printf STDERR "writing %d new lines (and %d old onees) to %s\n", scalar(@dmesg), scalar(@omesg), $fn;
  open(STDOUT,"| gzip >$fn.new");
  print for ( @omesg, @dmesg );
  close(STDOUT);
  rename "$fn.new", "$fn";
  system("dmesg -c > /dev/null 2>&1");
  system("ln -sf $fn /var/log/dmesg/current.gz");
}
main(@ARGV);
