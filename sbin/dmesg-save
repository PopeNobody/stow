#!/usr/bin/perl
#! -*- perl -*- -p
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
use autodie qw(:all);
our ($VERSION) = join("-",qw ( 1 0 0 ));
BEGIN {
  use FindBin qw($Script $Bin);
  use lib "$Bin/../lib/perl";
  $|++;
  $\="\n";
  exec "sudo", "$Bin/$Script", @ARGV
    if $< or $>;
};
use Data::Dump qw(ddx dd ppx pp);
use Getopt::WonderBra;
use Util::IO;
use File::Path;
mkpath("/var/log/dmesg");
chdir("/var/log/dmesg");
sub version {
  print "version $VERSION";
}
sub help {
  print "usage: $0 [ -a ]";
  print "       -a: append to existing output";
  print "";
}
open(STDERR,">&STDOUT");
sub serdate {

};
sub get_filename($) {
  my $new=shift;
  my ($fn);

  unless($new) {
    my @fn=sort glob("dmesg-*.gz");
    $fn=shift @fn;
  }
  unless(defined($fn)) {
    $fn=sprintf("dmesg-%s.gz", map { split } qx(serdate));
  }
  return $fn;
}
my ($fn);
{
  print STDERR "1: dmesg1: checking head";
  no autodie qw(close);
  open(my $tmp_fh,"dmesg|");
  exit(0) unless defined($_=<$tmp_fh>);
  chomp;
  print STDERR "2: dmesg1: line: $_";
  if(m{microcode}){
    print STDERR "3: dmesg1: microcode: new";
    $fn=get_filename(1);
  } else {
    print STDERR "4: dmesg1: no microcode: old";
    $fn=get_filename(0);
  }
  print STDERR "5: dmesg1: closed";
}
{
  open(my $out_fh,"|gzip>$fn.new");
  print STDERR "1: out_fh: opened output |gzip>$fn.new";
  {
    if(-e $fn) {
      my $cnt=0;
      open(my $old_fh,"zcat $fn|");
      print STDERR "1: zcat: opened";
      while(<$old_fh>){
        chomp;
        next unless length;
        ++$cnt;
        print STDERR "2: zcat: $_";
        $out_fh->print($_);
      };
      print STDERR "3: zcat: closing";
      close($old_fh);
    };
  }
  {
    open(my $new_fh,"dmesg -c|");
    print STDERR "1: new_fh: opened";
    my $cnt=0;
    while(<$new_fh>){
      chomp;
      next unless length;
      ++$cnt;
      print STDERR "2: new_fh: $_";
      $out_fh->print($_);
    };
    close($new_fh);
    print STDERR "3: new_fh: closed";
  }
  close($out_fh);
  print STDERR "2: out_fh: closed";
}
print STDERR "3: out_fh: linking to current.gz";
for("current.gz"){
  rename("$fn.new", $fn);
  unlink $_;
  symlink($fn,$_);
};
