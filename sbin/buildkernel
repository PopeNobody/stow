#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
BEGIN {
$|++; $\="\n"; $,=" "; $"=" "; $/="\n";
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
};
my $term = -t STDIN ? 1 : 0;
print "term: $term";
use POSIX qw(strftime);
sub serdate()
{
  my @time=gmtime;
  return strftime("%Y%m%d-%H%M%S-gmt", @time);
}

open(STDOUT,"|tee /usr/src/linux/buildkernel.log");
open(STDERR,">&STDOUT");
use autodie qw(:default);
use Nobody::PP;
use Getopt::WonderBra;

if($< or $>){
  print STDERR "press enter to run with sudo, q to quit";

  exec "sudo", "perl", $0, @ARGV
} else {
  print STDERR "We are already root";
};

my ($boot);
my (@proc)=map { split } qx(nproc);
if(@proc && $proc[0]>16){
  $proc[0]=$proc[0]/2;
};
unshift(@proc,"-j") if @proc;

sub help {
  print "usage: $0 [-j #]";
  print "   -j: number of jobs";
  print "";
};
our($VERSION)=join("-",qw(1 0 0));
sub version {
  print "$0: version $VERSION;";
};
@ARGV = getopt("nbj:", @ARGV);
while(($_=shift)ne'--'){
  if(/^-j$/){
    my $procs=shift;
    die "missing required int arg for -j" unless defined($procs);
    @proc=("-j",$procs);
  } elsif (/^-n$/) {
    $boot=0;
  } elsif (/^-b$/) {
    $boot=1;
  } else {
    die "unexpected: $_";
  };
};
chdir("/usr/src/linux");
sub vsystem(@){
  STDERR->print(@_);
  system(@_);
  die "command failed" if $?;
}
vsystem(qw(make oldconfig));
system(qw(git commit -a -m), sprintf("buildkernel %s", serdate()));
vsystem(qw(make bzImage modules), @proc);
vsystem(qw(make modules_install install), @proc);
if(defined($boot)) {
  if($boot) {
    print STDERR "running reboot";
    exec qw(reboot);
  }
} elsif ($term) {
  print STDERR "running may-reboot";
  open(STDERR,">&STDIN");
  open(STDOUT,">&STDIN");
  exec qw(may-reboot);
} else {
  exit 0
}
