#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use Carp qw(verbose);
use lib "/opt/lib/perl";
use strict;
use warnings;
use common::sense;
use autodie;
use Nobody::Util;
use POSIX ":sys_wait_h";

$,=" ";
if($< or $>){
  say STDERR "press enter to run with sudo, q to quit";
  exec "sudo", "perl", $0, @ARGV
} else {
  say STDERR "We are already root";
};
die "stil not root" if $< or $>;
sub vsystem(@);
use FindBin qw($Bin);
use lib "$Bin/../lib/perl";
my $term = -t STDIN ? 1 : 0;
say "term: $term";
use POSIX qw(strftime);
use Nobody::PP;
use Getopt::WonderBra;
sub kernel_tree($);
my ($src_dir,$src_ver) = kernel_tree(@ARGV ? shift : "/usr/src/linux");
my ($dst_dir) = "/boot/$src_ver";
system("rm -fr $dst_dir");
system("mkdir -p $dst_dir");
open(my $LOG,">","$dst_dir/buildkernel.log");
my ($serdate)=strftime("%Y%m%d-%H%M%S", gmtime );
print("dst_dir=$dst_dir\n");
vsystem("mkdir -p $dst_dir");


my ($boot);
my (@proc)=map { split } qx(nproc);
unshift(@proc,"-j") if @proc;

sub help {
  say "usage: $0 [-j #]";
  say "   -j: number of jobs";
  say "";
};
our($VERSION)=join("-",qw(1 0 0));
sub version {
  say "$0: version $VERSION;";
};
@ARGV = getopt("nbj:", @ARGV);
while(($_=shift)ne'--'){
  if(/^-j$/){
    my $procs=shift;
    die "missing required int arg for -j" unless defined($procs);
    @proc=("-j",$procs);
  } elsif (/^-n$/) {
    warn "will not boot or ask to boot when done";
    $boot=0;
  } elsif (/^-b$/) {
    warn "will boot without asking when done";
    $boot=1;
  } else {
    die "unexpected: $_";
  };
};
chdir("/usr/src/linux");
vsystem(qw(make oldconfig));
system(qw(git commit -a -m), sprintf("buildkernel %s", $serdate));
vsystem(qw(make bzImage modules), @proc);
# before we do modules_install, we need do move any dirs ( not links ) from
# /lib/modules/* to /boot/lib/modules/*
vsystem("mkdir -p /boot/lib/modules");
if(! -l "/lib/modules" ) {
  chdir("/lib/modules");
  if( (@_=grep { -e } glob("*")) ) {
    vsystem("mv /lib/modules/* /boot/lib/modules");
  };
  vsystem("ln -sf /boot/lib/modules /lib/modules");
}
chdir("/boot/lib/modules");
for(glob("[0-9]*")){
  say "glob: $_";
  next unless -d "$_";
  vsystem(qw{ mkdir -p }, "/boot/$_");
  vsystem("rm -fr /boot/$_/modules");
  vsystem("mv",$_,"/boot/$_/modules");
} 
chdir("$src_dir");
{
  local ($ENV{INSTALL_MOD_PATH})="$dst_dir/mod";
  system("ls -l $dst_dir");
  vsystem(qw(make modules_install),@proc);
};
chdir($dst_dir."/mod/lib/modules");
my ($dst_ver)=glob("$src_ver*");
if($dst_ver eq $src_ver) {
  # say nothing, act natural
} elsif ( $dst_ver eq $src_ver."+" ) {
  warn "changing version from $src_ver to $dst_ver";
  if(-d "/boot/$src_ver") {
    system("ls -ld /boot/$src_ver");
    vsystem("rm -fr /boot/$dst_ver");
    vsystem("mv", "/boot/$src_ver", "/boot/$dst_ver");
  };
  $src_ver=$dst_ver;
  $dst_dir.="+";
} else {
  die "\nsrc_ver $src_ver\ndst_ver $dst_ver";
};
chdir("$src_dir");
{
  local($ENV{KERNEL_DIR})="$dst_dir";
  vsystem(qw(make install),@proc);
};
system("ls -l $dst_dir");
vsystem("rm -fr $dst_dir/mod");
vsystem("mv $dst_dir/bzImage* $dst_dir/vmlinuz");
if(-e glob("$dst_dir/System.map?*") ){
  vsystem("mv $dst_dir/System.map?* $dst_dir/System.map");
}
system("ls -l $dst_dir");
exit(0);
open(my $grub,">/boot/grub.cfg");
while(<DATA>){
  $_=qq("$_");
  $_=eval "$_";
  $grub->print;
};
close($grub);
close($LOG);
exit 0;
sub vsystem(@)
{
  STDERR->say(@_);
  my $pid;
  if($pid=fork) {
    
    my $kid;
    while(1) {
      $?=0;
      $kid = waitpid($pid, 0);
      my $err=0+$?;
      if(defined($kid)) {
        return if($kid==$pid && !$err);
        die "cmd (@_) pid ($pid) err ($?)\n";
      } else {
        warn "waitpid($pid)=>", pp($kid), "\n";
      };
    };
  } else {
    open(STDOUT,">&".fileno($LOG));
    open(STDIN,"</dev/null");
    close($LOG);
    exec(@_);
    die "exec:@_:$!";
  }

}
sub kernel_tree($) {
  $src_dir=shift;
  $src_ver=qx{head $src_dir/Makefile -n 5};
  $src_ver=[  grep { s{#.*}{}; length; } split("\n", $src_ver)   ];
  $src_ver={ grep { s{\s*}{}g } map { m{(.*)=(.*)} } @{$src_ver} };
  $src_ver=join(".", grep { length } map { $src_ver->{$_} } qw( VERSION PATCHLEVEL SUBLEVEL EXTRAVERSION ) );
  $src_ver=[ $src_dir, $src_ver ];
  return wantarray ? @{$src_ver} : $src_ver;
};

__DATA__
set menu_color_normal=cyan/blue
set menu_color_highlight=white/blue

set timeout_style=menu
set timeout=5

menuentry 'latest' {
  linux $dst_dir/vmlinuz init=/bin/bash root=/dev/mapper/lvm-devuan
  boot
}
menuentry "fwsetup" {
   fwsetup
}

EOF
