#!/usr/bin/perl

my $check=0;
$|++;
use strict;
use warnings;
use Digest::MD5;
my %missing;
my %skip = map { $_, 1 } qw( . .. CVS .git .md5 );
sub md5dir($);
sub md5file($){
	my ($fn,$fh) =shift;
	die "got a dir" if -d $fn;
	if( open($fh,$fn) ) {
		my $md5=new Digest::MD5;
		$md5->addfile($fh);
		return $md5->hexdigest;
	} else {
		warn "open:$fn:$!";
		return undef;
	};
}
sub dents($) {
	my $dir=shift;
	opendir(my $dh, $dir) or die "opendir:$dir:$!";
	grep { !$skip{$_} } readdir($dh);
}
sub fixdir($) {
	local $_="$_[0]/";
	s{//+}{/};
	return $_;
}
sub md5dir($) {
	my $dir = fixdir(shift);
	my @dents = dents($dir);
	die "need non-zero length dir!" unless length($dir);
	my %res;
	local $_;
	for(@dents) {
		if( -d "$dir$_" ) {
			md5dir "$dir$_";
			$_=$_."/.md5";
		}
		$res{$_}=md5file("$dir$_");
	}
	if($check){
		if(open(my $fh,"<$dir.md5")) {
			while(<$fh>){
				chomp;
				my ($dig,$name)=split(/ [ *]/,$_,2);
				if(!exists $res{$name}){
					warn "missing file: $dir $name\n";
				} elsif ($res{$name} ne $dig) {
					warn "mismatch: $dir $name ($res{$name} ne $dig)\n";
				}
				delete $res{$name};
			}
		} else {
			warn "open:<$dir.md5:$!\n";
		}
		if( keys %res ) {
			for( sort keys %res ) {
				warn "extra file: $dir $_\n";
			};
		}
	} else {
		open(my $fh,">$dir.md5") or die "open:>$dir.md5:$!";
		for( sort keys %res ) {
			$fh->print($res{$_}, $_);
		}
		close($fh);
	}
}
$,="  ";
$\="\n";
if(@ARGV == 1 && grep { $_ eq "-c" } @ARGV ) {
	$check=1;
} elsif (@ARGV) {
	die "usage: $0 [-c]";
};
md5dir(".");
