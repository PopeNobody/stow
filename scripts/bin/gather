#!/usr/bin/perl
# vim: sw=2 ts=2
use strict;
use warnings;
use autodie qw(:all);
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
};
use Getopt::WonderBra;
sub help
{
  print "$0: [-d|-u] <files>";
};
sub version
{
  print "$0: version 0.2.0";
};
@ARGV=getopt("bdu",@ARGV);
our(%hand);
my ($dup) = ( 0, 0 );
my $block=0;
$hand{-b}=sub {
  $block=1;
};
$hand{-u}=sub {
  $dup=-1;
};
$hand{-d}=sub {
  $dup=1;
};
while(($_=shift)ne'--'){
  my $hand=$hand{$_};
  if( !defined($hand) ) {
    help(1);
  };
  $hand->( @ARGV );
};

my %data;
my $k;
my @v;

while(<>) {
	($k,@v) =split;
  next unless @v;
	push(@{$data{$k}}, @v);
};
{
  if( $block ) {
    my ($max) = 0;
    for $k (keys %data) {
      for( @{$data{$k}} ) {
        $max=length if $max<length;
      };
    };
    $max+=2;
    print "max:\n";
    my $col = $ENV{COLUMNS} || 80;
    for $k (sort keys %data){
      print "\n$k";
      my $pos = $col;
      @v=@{$data{$k}};
      for(@v)
      {
        if ( $pos >= ($col-$max) ) {
          print "\n     ";
          ($pos) = 5;
        };
        $_=$_.(' 'x($max-length));
        print $_;
        $pos+=$max;
      };
      print "\n";
    };
  } else {
    $,=" ";
    $\="\n";
    for $k (sort keys %data){
      @v=@{$data{$k}};
      if( $dup == 1 && @v < 2 ) {
        next;
      } elsif ( $dup == -1 && @v >= 2 ) {
        next;
      };
      print $k, @v;
    }
  }
};
