#!/usr/bin/perl
# vim: sw=2 ts=2
use strict;
use warnings;
use autodie qw(:all);
BEGIN {
  use FindBin qw($Bin $Script);
  use lib "$Bin/../lib/perl";
};
use Data::Dumper;
use Getopt::WonderBra;
use File::Basename;
use Carp qw(cluck);

sub help() {
  print "$0 [ -n ] <files>\n";
};
sub version() {
  print "$0 version 0.2\n";
};
sub debug(@){
}

my $test;
my $neg=0;
my $cluck=0;
debug("script: $Script\n");
for($Script) {
  if(/^lsfiles$/){
    $test="-f";
  } elsif ( /^lsdirs$/ ) {
    $test="-d";
  } elsif ( /^lslinks$/ ) {
    $test="-l";
  } else {
    print "name not recognized.  no default test";
  }
}
debug("test: $test\n");
@ARGV = getopt( 'fdnlec', @ARGV );
while ( ( $_ = shift ) ne '--' )
{
  if ( /^-[fdle]$/ ) {
    die "repeated specification of -[fdle]" if defined $test && $test ne $_;
    $test="$_ \$_";
  } elsif ( /^-c$/ ) {
    $cluck=1;
  } elsif ( /^-n$/ ) {
    cluck "warning:  double-negative" if $neg;
    $neg=!$neg;
  } else {
    die "I do not grok -", $_;
  };
};
$test="!($test)" if( $neg );
if(!@ARGV) {
  -t STDIN && print STDERR "items: ";
  @ARGV=grep { chomp || 1 } <STDIN>;
};
@ARGV = grep { chomp || length } <STDIN> unless(@ARGV);
for(@ARGV) {
  if($cluck) {
    cluck "$_\n" if eval $test;
  } else {
    print "$_\n" if eval $test;
  };
};
