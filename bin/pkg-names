#!/usr/bin/perl

use strict;
use warnings;
BEGIN {
  $|++;
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
};
use autodie qw(:all);
use Util;
use Data::Dumper;

sub help {
   
}
sub version {
  print "some other version";
};


open(STDIN,"</dev/null");
$Data::Dumper::Deparse=1;
sub void_line($) {
  local ($_)=shift;
  s{^\s*\S+\s+}{};
  if( @_=m{(\S*)(-(alpha|)[Bv0-9]\S+)} ) {
    return shift;
  } else {
    print "failed: $_\n";
  };
};
sub void_source() {
    open(STDIN,"xbps-query -s . -R|");
};
sub debian_source() {
    open(STDIN,"apt-cache pkgnames|");
};
sub debian_line($) {
  chomp;
  $_;
};
sub get_os_type() {
  local (@_);
  @_ = map { split } qx(os);
  return shift;
};
sub match($);
sub line($);
sub handle_args(\@);

my $os_type=get_os_type();
if( $os_type eq "void" ) {
  *line=\&void_line;
  void_source();
} elsif ( $os_type eq "debian" ) {
  *line=\&debian_line;
  debian_source();
} elsif ( $os_type eq "linuxmint" ) {
  *line=\&debian_line;
  debian_source();
} elsif ( $os_type eq "ubuntu" ) {
  *line=\&debian_line;
  debian_source();
} else {
    die "os_type neither debian nor void\n";
};
sub main()
{
  my %seen;
  while( <STDIN> )
  {
    next unless match($_);
    $seen{line($_)}++;
  };
  print "$_\n" for sort keys %seen;
};
@ARGV=handle_args(@ARGV);
main();
sub handle_args(\@)
{
  local(*_)=shift;
  if(@_) {
    my @re = map { qr/$_/ } @ARGV;
    *match=sub ($){
      my $a=$_;
      for(@re) {
        return 1 if $a=~$_;
      }
      return 0;
    };
  } else {
    *match=sub ($){
      1;
    };
  };
};
