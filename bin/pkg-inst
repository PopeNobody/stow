#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
BEGIN {
  use FindBin qw($Bin $Script);
  use autodie;
  use lib "$Bin/../lib/perl";
  use Getopt::WonderBra;
  $|++; $\="\n"; $,=" "; $"=" "; $/="\n";
};
sub opts(@);
sub help {
  local($0) = map { m{/} ? m{.*/(.*)} : $_ } $0;
  print "usage: $0 --help\n";
  print "       $0 <files>";
  print "       lists all installed packages\n";
  print "       $0 -u <files>";
  print "       lists all uninstalled (but not purged) packages\n";
}
sub version {
  print "version: pkg-inst 0.1";
}
$ENV{LANG}="C";
my $del=0;
opts(@ARGV);

open(STDIN,"</dev/null");
sub filter;
sub mkFilter(@);
open(STDIN,"dpkg -l|");
sub xwarn(@){
  my ($pack,$file,$line) = caller;
  @_ = split(/\n/m,join("",@_));
  print "$file:$line:$_" for @_;
};
while(<STDIN>){
  next unless s{^([a-z][a-z])\s*}{};
  my $stat=$1;
  if($stat eq "ii") {
    next if $del;
  } else {
    next unless $del;
  };
  s{\s.*}{};
  ($_,my $arch)=split /:/;
  next unless filter;
  chomp;
  print;
};
sub opts(@) {
  @_=getopt("u",@_);
  while(($_=shift)ne'--'){
    if($_ eq '-u') {
      $del=1;
    } else {
      die "did not expect '$_'";
    };
  };
  *filter=mkFilter(@_);
}
sub mkFilter(@) {
  @_ = grep { length } @_;
  return eval "sub { return 1; }" unless @_;
  for(join("|",@_)){
    return eval "sub { m{$_}; }";
  };
};
