#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
BEGIN { package DB; $CreateTTY=4; };
use strict;
use warnings;
use autodie;
use Time::HiRes qw(time);
use Nobody::Util;
use Fcntl;
use Fcntl qw(O_NONBLOCK);
use Env qw($HOME @PATH);
BEGIN {
  our(@VERSION) = qw( 0 1 0 );
  sub version {
    print join(".",@VERSION);
  }
  sub help {
    print grep { chomp; 1 } <DATA>;
  };
  use Getopt::WonderBra;
}
  our(%cmd,@cmd);
sub pkg_name(@);
sub opts(@);
use feature qw(say);
sub main(@);

#@ARGV = qw(-n) unless @ARGV;
exit(main(opts(getopt("n",@ARGV))));
die "NONE SHALL PASS";

sub group($@);
my $use_pkg_name=0;
our(%opts);
sub opts(@){
  local(@_,$_)=@_;
  while(($_=shift)ne'--'){
    if( $_ eq '-n' ) {
      $use_pkg_name=1;
    } else {
      die "unexpected: ($_)";
    }
  };
  return @_;
};
my %pid;
sub reap {
  my $pid=waitpid(-1,0);
  print "freaped $$\n";
  my $res=$?;
  $cmd{$pid}{res}=$res;
  delete $pid{$pid};
};  
sub run_pipe(@){
  open(STDIN,"</dev/null");
  our (@cmd)= @_;
  my $pid=0;
  for my $cmd(@cmd) {
    $pid=open(STDIN,'-|');
    if(!$pid) {
      warn("$$ $pid: @$cmd\n");
      exec(@$cmd);
      die "exec @cmd";
    };
    $cmd{$pid}{pid}=$pid;
    $cmd{$pid}{cmd}="@$cmd";
    $pid{$pid}=$pid;
  };
  my $pkg;
  while(<STDIN>)
  {
    if(s{^Package: *}{}) {
      $pkg="$_";
    } elsif(s{^Description.en: *}{   }) {
      print "$pkg:$_\n";
    };
  };
  no autodie 'close';
  if(!close(STDIN)) {
    my ($err) = $?;
    if($err/256) {
      warn "$$:pipe returned ", ($err/256);
    } else {
      warn "$$: pipe died of signal: ", $err%256;
    };
    warn "$$:pipe returned $?";
  };
}
sub main(@){
  my (@args) = splice(@_);
  if($use_pkg_name) {
    @args=qw( . ) unless @args;
    push(@cmd,["pkg-name", @args]);
    push(@cmd,[ qw( sort -u ) ]);
    push(@cmd,[ qw( xargs apt-cache show ) ]);
  } elsif(@args) {
    push(@cmd,[ qw( apt-cache show ), @args ]);
  } else {
    die "-n not specified, and no pkg names given";
  };
  run_pipe(@cmd);
  return 0;
};
sub group($@){
  my $title=shift;
  @_=sort { $a->[0] cmp $b->[0] } @_;
  print join(".",@$_) for @_;
};
__DATA__
usage: $0 [-n] <pkg-name>
       <pkg-name> = the name of a package

      -n: use pkg-name to expand the pkgname

      use -n . to show all packages
      };
