#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
  $|++; $\="\n"; $,=" "; $"=" "; $/="n";
};
use autodie qw(:all);
use Nobody::PP;

my (%pid,$pid,@pid);
#$SIG{CHLD}=sub {
#  $pid=wait;
#  push(@pid,[$pid,$?]);
#};
for(@ARGV){
  my ($dir,$tgz) = map { s{/+$}{}; ( $_, "$_.tgz" ) } $_;
  unless(m{[^.]}){
    warn "nothing but dots!";
    next;
  };
  unless(-d) {
    warn "cannot find directory '$dir'";
    next;
  }
  if($tgz =~ s{^[.]}{}) {
    warn "removed leading dot from archive name";
  };
  if($pid=fork){
    ddx(\%pid);
    printf "pid=%10d tgz=%20s\n",$pid,$tgz;
    $pid{$pid}=$tgz;
  } else {
    open(STDOUT,">&STDERR");
    my @cmd=qw(tar -cz --remove-files -f);
    push(@cmd,$tgz,$dir);
    #    open(STDERR,">>stderr.log");
    #open(STDOUT,">&STDERR");
    print "", ("-" x 30);
    no autodie;
    exec @cmd;
    die "exec:@cmd:$!";
  }
};
while(keys %pid){
  no autodie;
  my ($pid,$err) = ( wait, $? );
  if($pid==-1){
    warn "wait returned 1";
    next if fork;
    exec "pstree -ap $$";
  } else {
    my $tgz = delete $pid{$pid};
    warn "tgz => ", Dumper($tgz);
    print "pid: $pid tgz: $tgz err: $err";
  };
};
