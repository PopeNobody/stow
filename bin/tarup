#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use common::sense;
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
  $|++; $\="\n"; $,=" "; $"=" "; $/="n";
};
my %opt = (
  'remove' => 1,
  'crypt' => 0,
  'quiet' => 0,
);
use autodie;
use Nobody::Util qw(ddx);
use Getopt::WonderBra;
sub help {
  print "usage: $0 [ -r ] <dir...>\n";
  print "  tars up the given directory, using the --remove-files option";
  print "  pretty much rm -fr with a backup.  The backup will go into";
  print "  dir.tgz.  if dir starts with a period, the period will be";
  print "  removed from the name of the tar file";
  print;
  print "   -r - remove dir.";
  print "   -R - don't remove dir.";
  print "   -c - encrypt the tar result.";
}
our(@VERSION) = qw( 1 0 0 );
sub version {
  $"=".";
  print "version( @VERSION )";
}
my (%pid,$pid,@pid);
sub tarup($) {
  die "no args" unless @_;
  local($_)=shift;
  s{/+}{/};
  s{/$}{};
  die "cannot find directory '$_'" unless -d;
  die "nothing but dots" unless m{[^.]};
  chdir("/") if s{^/}{};
  if(@_=m{(.*)/(.*)}) {
    chdir(shift);
    $_=shift;
  };
  my ($tgz)="$_.tgz";
  if($tgz =~ s{^[.]}{} && !$opt{quiet}) {
    warn "removed leading dot from archive name"
  };
  if( -e $tgz ) {
    die "not clobbering existing '$tgz'";
  };
  open(STDOUT,">&STDERR");
  my @cmd=qw(tar -zc );
  if($opt{remove}) {
    warn "removing files" unless $opt{quiet};
    push(@cmd,"--remove-files");
  }
  push(@cmd,"-f$tgz",$_);
  print "running (@cmd) in dir (", readlink("/proc/self/cwd"), ")";
  exec(@cmd);
  die "exec: $!";
}
sub main() {
  local (@_,$_)=getopt("qQrRcC", @ARGV);
  $_="*";
  my (%hand) = ( 
    '-r' => sub { $opt{remove}=1; return @_; },
    '-R' => sub { $opt{remove}=0; return @_; },
    '-q' => sub { $opt{quiet}=1; return @_; },
    '-Q' => sub { $opt{quiet}=0; return @_; },
    '-c' => sub { $opt{crypt}=1; return @_; },
    '-C' => sub { $opt{crypt}=0; return @_; },
  );
  while(($_=shift(@_))ne '--')
  {
    my $hand = $hand{$_};
    die "unknown option: ($_)" unless defined $hand;
    @_ = $hand->(@_);    
  };
  die "crypt not implmented" if $opt{crypt};
  use vars qw($obj %pid $pid $res);
  help unless(@_);
  die "help failed to exit" unless @_;
  die "no dirs" unless @_;
  tarup(shift) if(@_==1);
  my %pid;
  for(@_) {
    tarup($_) unless $pid{$_}=fork;
  };
  my $res=0;
  while(%pid) {
    $?=0;
    $pid=wait;
    die "wait returned -1.", pp(\%pid) if $pid==-1;
    for(keys %pid) {
      next unless $pid{$_} == $pid;
      say STDERR "process for $_ returned $?" if $?;
      delete $pid{$_}; 
    };
  };
};
main();
