#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
  $|++; $\="\n"; $,=" "; $"=" "; $/="n";
};
my $remove=0;
use autodie qw(:all);
use Nobody::PP qw(ddx);
use Getopt::WonderBra;
sub help {
  print "no help!";
}
our(@VERSION) = qw( 1 0 0 );
sub version {
  $"=".";
  print "version( @VERSION )";
}
my (%pid,$pid,@pid);
sub tarup($) {
  die "got --" if grep { m/^--$/ } @_;
  my ($dir,$tgz) = map { s{/+$}{}; ( $_, "$_.tgz" ) } $_;
  unless(m{[^.]}){
    warn "nothing but dots!";
    return;
  };
  unless(-d) {
    warn "cannot find directory '$dir'";
    return;
  }
  if($tgz =~ s{^[.]}{}) {
    warn "removed leading dot from archive name"
  };
  open(STDOUT,">&STDERR");
  my $cmd="tar";
  my @arg=qw( -cvz );
  if($remove) {
    push(@arg,"--remove-files");
  }
  push(@arg,"-f", $tgz,$dir);
  exec($cmd, @arg);
}
sub main() {
  local (@_,$_)=getopt("rR", @ARGV);
  $_="*";
  while(($_=shift(@_))ne '--')
  {
    if(/r/) {
      $remove=1;
    } elsif(/R/) {
      $remove=0;
    } else {
      die "($_)?";
    };
  };
  use vars qw($obj %pid $pid $res);
  for(@_) {
    print STDERR "gonna fork for $_";
    if($pid=fork) {
      $pid{$pid}=$_;
    } else {
      print STDERR "$$:$pid: tar $_";
      print "& (( $_ () @_ ))";
      tarup($_);
      exit(0);
    };
  };
  while(keys %pid) {
    print STDERR "pids: @pid";
    $pid=wait;
    $res=$?;
    $obj=delete $pid{$pid};
    next unless defined $obj;
    print "tarup for $obj exited", ($res ? " with $res" : "");    
    print STDERR;
  };
};
main();
