#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
use Nobody::Util;
use POSIX qw(getcwd);
use Env qw($HOME @PATH $PWD);
use vars qw(%opt);
use Getopt::WonderBra;
$ENV{LANG}="C";
sub resolve($);
sub opts(@);
sub verbose(@){};
sub verbose_1(@){ warn("@_\n"); };
sub verbose_n(@){ warn("@_"); };
if($opt{verbose}){
  no warnings 'redefine';
  *verbose=($opt{verbose}>1 ? \&verbose_1 : \&verbose_n );
};
die "$@" if "$@";
resolve($_) for @ARGV;
sub dir($) {
  local ($_)="$_";
  s{/+[^/]+/*$}{};
  return $_;
}
our($t, $d);
sub resolve($) {
  local ( $t, $d ) = ( shift, $PWD );
  s{//+}{/}g for ($t,$d);
  {
    local $_="$t";
    say STDERR "R: $_";
    if($opt{cmd}) {
      ($_,@_) = map { split } qx(which $_);
      if($t ne $_) {
        say STDERR "C: $_";
        $t=$_;
      };
    }
    unless(-l || -e) {
      stat;
      die "$!";
    }
  }
  while(1) {
    if($t !~ m{^/}){
      $_=join('/',$d,$t);
      say STDERR "D: $d $t => $_";
      $t=$_;
    };
    undef($d);
    last unless -l $t;
    $d=dir($t);
    $_=readlink($t);
    say STDERR "L: $t => $_";
    $t=$_;
  };
  if(m{/}){
    ($d,$t) = m{(.*)/(.*)};
    ($_) = map { split } qx( cd $d && pwd );
    $_="$d/$t";
  };
  say STDOUT "$_";
}
BEGIN {
  %opt = (
    cmd=>0
  );
  sub help {
    print "usage: $0 <-c> <-v>";
    print "       -c: search on path";
    print "       -v: verbose";
  }
  our(@VERSION) = qw( 0 1 0 );
  sub version {
    $"=".";
    print "$0 version @VERSION";
  }
  use Getopt::WonderBra;
  my %arg = (
    'c' => \$opt{cmd},
    'v' => \$opt{verbose}
  );
  sub argstr() {
    my %abbr;
    return join("",grep { s{^-(.)$}{$1} || m{^.$} } keys %abbr);
  };
  @ARGV=getopt("cv",@ARGV);
  while(@ARGV) {
    local $_ = shift(@ARGV);
    last if $_ eq '--';
    
    if(m{^--}) {
      if(exists $arg{$_}) {
        ${$arg{$_}}++;
        next;
      }
      warn "no arg: $_";
    } elsif ( m{^-(.)$} ) {
      if(exists $arg{$1}) {
        ${$arg{$1}}++;
        next;
      }
      warn "no arg: $_";
    }
    # the floor is lava
    die "unexpected arg: $_";
  };
};
