#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use FindBin qw($Bin $Script);
use lib "$Bin/../lib/perl";
use strict;
use warnings;
use autodie qw(:default);
use Nobody::PP;
use Util;
use Getopt::WonderBra;
$|++; $\="\n"; $/="\n";

@ARGV=qw(-b list);

our($dup,$block,$num,@xxx) = qw(0 0 0);
our(%data,$key,@key,@val);
our(%help);

sub main();
sub handle_opts(@);
sub read_data(@);
sub block_disp();
sub normal_disp();

main();


sub main() {
  local(@_)=splice(@ARGV);
  @_=handle_opts(@_);
  read_data(@_);
  if($block){
    block_disp;
  } else {
    normal_disp;
  };
}
sub read_data(@) {
  #$DB::single=1;
  warn "reading data from stdin -- a tty" if @_==0 && -t STDIN;
  local(@ARGV)=splice(@_);
  while(<>) {
    ($key,@val) =split;
    next unless @val;
    push(@key,$key);
    push(@{$data{$key}}, @val);
  };
}
BEGIN {
  sub help
  {
    print "$0: [-d|-u] <files>";
  };
  sub version
  {
    print "$0: version 0.2.0";
  };
}
{
  my %hand;
  BEGIN {
    %data = (
      num=>\$num,
      block=>\$block,
      dup=>\$dup,
    );
    %hand = (
      n => \$num,
      b => \$block,
      u => sub { $dup--; return @_; },
      d => \$dup, count=>\$dup,
      x => \@xxx,
    );
  }
  sub handle_opts(@) {
    @_=getopt("nbdux:",@_);
    while(($_=shift)ne'--'){
      die "expected switch" unless s{^-}{};
      my $hand=$hand{$_};
      if(!defined($hand)){
        help(1);
      } elsif(ref($hand)eq'SCALAR'){
        $$hand=($$hand||0)+1;
      } elsif ( ref($hand) eq 'ARRAY' ) {
        push(@{$hand},shift(@_));
      } elsif ( ref($hand) eq 'CODE' ) {
        @_ = $hand->( @_ );
      } else {
        die "expected hand to be a SCALAR, an Array, or a CODE ref";
      };
    };
    return @_;
  }
};
sub to_tab($@){
  my $rows=shift;
  my @rows;
  for( 0 .. $rows-1 ) {
    push(@rows,[]);
  }
  @_ = map { @$_ } @_;
  while(@_) {
    for( 0 .. $rows-1 ) {
      push(@{$rows[$_]}, shift);
      last unless @_;
    };
  };
  return @rows;
};
sub block_disp() {
print "block_disp()";
  my $col = $ENV{COLUMNS} || 80; 
  for $key (@key){
    my ($arr) = delete $data{$key};
    next unless defined $arr;
    print "key: $key";
    @{$arr} = [ sort { length($b)<=>length($a) || $a cmp $b } @{$arr} ];
    my $rows=1;
    my @tab;
    do { 
      @tab = to_tab($rows++, @{$arr});
    } while(length("@{$tab[0]}")>=$col);
    my @len = map { length } @{$tab[0]};
    @len = map { "%-".$_."s" } @len;
    my $fmt = join(" ", @len)."\n";
    for(@tab) {
      while(@$_ < @len) {
        push(@$_,"");
      };
      printf $fmt, @$_;
    };
  };
}
sub normal_disp() {
  $,=" ";
  $\="\n";
  for $key (@key){
    my ($arr) = delete $data{$key};
    next unless defined $arr;
    @val=@{$arr};
    if( $dup == 1 && @val < 2 ) {
      next;
    } elsif ( $dup == -1 && @val >= 2 ) {
      next;
    };
    unshift(@val,scalar(@val)) if $num;
    print $key, @val;
  }
}
