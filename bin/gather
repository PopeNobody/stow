#!/usr/bin/perl
# vim: sw=2 ts=2
use strict;
use warnings;
<<<<<<< HEAD
$ENV{LANG}="C";
=======
use autodie qw(:all);
>>>>>>> church
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
};
<<<<<<< HEAD
use autodie qw(:all);
use Data::Dump;
=======
>>>>>>> church
use Getopt::WonderBra;
sub help
{
  print "$0: [-d|-u] <files>";
};
sub version
{
  print "$0: version 0.2.0";
};
<<<<<<< HEAD
@ARGV=getopt("bdu",@ARGV);
our(%hand);
my ($dup) = ( 0, 0 );
my $block=0;
$hand{-b}=sub {
  $block=1;
  return @_;
};
$hand{-u}=sub {
  $dup=-1;
  return @_;
};
$hand{-d}=sub {
  $dup=1;
  return @_;
=======
@ARGV=getopt("du",@ARGV);
our(%hand);
my ($dup) = ( 0, 0 );
$hand{-u}=sub {
  $dup=-1;
};
$hand{-d}=sub {
  $dup=1;
>>>>>>> church
};
while(($_=shift)ne'--'){
  my $hand=$hand{$_};
  if( !defined($hand) ) {
    help(1);
  };
<<<<<<< HEAD
  @ARGV = $hand->( @ARGV );
=======
  $hand->( @ARGV );
>>>>>>> church
};

my %data;
my $k;
my @v;
my @k;

<<<<<<< HEAD
sub read_data() {
  #print STDERR "read_data";
  while(<>) {
    ($k,@v) =split;
    #ddx([ \%data ]);
    next unless @v;
    push(@k,$k);
    push(@{$data{$k}}, @v);
  };
}
sub block_disp {
  #print STDERR "block_disp";
  #ddx(\@k);
  my ($max) = 0;
  for $k (@k) {
    for( @{$data{$k}} ) {
      $max=length if $max<length;
    };
  };
  $max+=2;
  print "max:\n";
  my $col = $ENV{COLUMNS} || 80;
  for $k (@k){
    print "\n$k";
    my $pos = $col;
    my $a=delete $data{$k};
    next unless defined $a;
    @v=@{$a};
    for(@v)
    {
      if ( $pos >= ($col-$max) ) {
        print "\n     ";
        ($pos) = 5;
      };
      $_=$_.(' 'x($max-length));
      print $_;
      $pos+=$max;
    };
    print "\n";
  };
}
sub normal_disp {
  #print STDERR "normal_disp";
  #ddx(\@k);
  $,=" ";
  $\="\n";
  for $k (@k){
    my ($a) = delete $data{$k};
    next unless defined $a;
    @v=@{$a};
=======
while(<>) {
	($k,@v) =split;
  next unless @v;
	push(@{$data{$k}}, @v);
};
{
  $,=" ";
  $\="\n";
  for $k (sort keys %data){
    @v=@{$data{$k}};
>>>>>>> church
    if( $dup == 1 && @v < 2 ) {
      next;
    } elsif ( $dup == -1 && @v >= 2 ) {
      next;
    };
    print $k, @v;
<<<<<<< HEAD
  }
}
read_data();
if($block){
  block_disp;
} else {
  normal_disp;
=======
  };
>>>>>>> church
};
