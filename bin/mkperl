#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
use autodie qw(:all);
use File::Copy qw(cp);
use Data::Dump qw(pp dd ddx);
our($Lib,$Bin,$Script);
BEGIN {
  eval q{use FindBin qw($Bin $Script)};
  die "$@" if "$@";
  ($Lib)=(map { split } qx(cd $Bin && cd ../lib && pwd));
  eval q{use lib "$Lib/perl"};
  die "$@" if "$@";
}
BEGIN {
  die "Lib not defined" unless defined $Lib;
  $|++;
  $\="\n"; $,=" "; $"=" ";
};
use Data::Dumper;
die "no filenames given" unless @ARGV;
sub read_src($){
  my ($src)=shift;
  die "$src does not exist" unless -e $src;
  local (@ARGV)=$src;
  $src=~s{^$ENV{HOME}/+}{~/};
  return join("", grep {  s{#src#}{$src} || 1 } <>);
}
my ($src) = read_src("${Lib}/perl-top.pl");

for(@ARGV){
  die "file '$_' exists" if -e;
  my $dst=$_;
  local($\)="";
  {
    open(my $fh,">$dst.new",);
    $fh->print($src);
    close($fh);
  }
  system("chmod +x $dst.new");
  rename("$dst.new", "$dst");
};
sub editor() {
  @_ = grep { defined } map { $ENV{$_} } qw(VISUAL EDITOR);
  for(@_){
    if(!-x) {
      warn "$_ not executable";
      next;
    }
    return $_;
  }
}
unshift(@ARGV,editor());
unshift(@ARGV,"echo")  unless (-t 1);
exec(@ARGV);
