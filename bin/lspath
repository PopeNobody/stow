#!/bin/bash

lspath() {
  local inodes=false source=false uniq=false dirs=false exist=false
  local IFS="$IFS"
  local -a argv
  if argv=( $(getopt edisu "$@" ) ); then
    : # Kludge for vim formatting
  else
    return 1
  fi


  set -- "${argv[@]}"
  while [ "x$1" != "x--" ]; do
    case "x$1" in
      (x-d)  dirs=true    ;;
      (x-e)  exist=true   ;;
      (x-i)  inodes=true  ;;
      (x-s)  source=true  ;;
      (x-u)  uniq=true    ;;
      (*) printf >&2 'illegal arg: %q\n' "$1"; return 1;;
    esac
    if $source && $inodes; then
      echo >&2 "can't do both source and inodes!"
      return 1;
    fi
    shift
  done
  shift
  (($#)) || set PATH
  (($#!=1)) && echo "expected one name" && return 1
  local -n var="$1"
  shift
  eval "set -- ${var//:/ }"
  for i; do set -- "$@" "${i//\/\//\/}"; shift; done
  if $uniq; then
    #printf 'debug1: %s\n' "$@" >&2
    local -a "seen=()" "res=()"
    set -- $( ls -fH1id "$@" 2>/dev/null )
    while [ -n "$*" ]; do
      local inode="$1" path="$2"
      shift 2
      if test -z "${seen[$inode]}"; then
        res+=( "$path" )
        seen[$inode]=x
      fi
    done
    set -- "${res[@]}"
  fi
  if $dirs || $exist; then
    local test=e
    $dirs && test=d
    #printf 'debug2: %s\n' "$@" >&2
    local -i num=$#
    for j; do test -$test "$j" && set -- "$@" "$j"; done
    shift $num
  fi
  #printf 'debug3: %s\n' "$@" >&2
  if $inodes; then
    ls -fH1id "$@"
  elif $source; then
    IFS=:
    echo "${!var}=$*"
  else
    printf '%s\n' "$@"
  fi
};
export -f lspath
return 0 2>/dev/null
lspath "$@"
