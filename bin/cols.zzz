#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;
{
  $DB::single=1;
}
use strict;
use warnings;
use FindBin qw($Bin);
use lib "$Bin/../lib/perl";
use Carp;
use Nobody::Util;
use autodie qw(:all);
sub main(@);
use Time::HiRes( qw( time sleep ) );
$|++; $\="\n"; $,=" "; $"=" "; $\="\n";
$Carp::verbose++ unless $Carp::verbose;

exit(main(@ARGV));

sub max_width(@);
our (@r,$r);
our (@s,@w);
our ($cs);
sub sel_cols {
  return unless defined;
  @_=split;
  [ @_[@s] ];
}
sub all_cols {
  return unless defined;
  [ split ];
};
sub width {
  my $i=0;
  for(@_){
    my $w=length;
    $w[$i]=$w if $w>($w[$i]//0);
  };
};
sub cols {
  no warnings ;
  if(@s) {
    *cols=\&sel_cols;
  } else {
    *cols=\&all_cols;
  };
  goto &cols;
};
sub main(@) {
  my @s = grep { /^\d+$/ } @_;
  @r = map { cols } <STDIN>;
  ($cs) = max( map { 0+@$_ } @r );

  my $i;
  $SIG{__WARN__}=sub{ --$i; $DB::single=1; warn(@_); };
  STDOUT->autoflush(1);
  @w = map { 0 } @{$r[0]};
  $\="";
  for(@r) {
    our(@c);
    local(*c)=$_;
    for($i=0;$i<@w;$i++){
      $c[$i]//="";
      my $l=length($c[$i]);
      $w[$i]=$l if ($w[$i]//0)<$l;
    };
  };
  ddx(\@r);
  my $fmt = join(' ', map { "%-${_}s" } @w)."\n";
  for(@r) {
    printf $fmt, @$_;
  };
};
