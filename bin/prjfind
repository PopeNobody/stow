#!/usr/bin/perl
# vim: ts=2 sw=2 ft=perl
eval 'exec perl -x -wS $0 ${1+"$@"}'
  if 0;

use strict;
use warnings;
use autodie;
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
  $|++;
  $\="\n"; $,=" "; $"=" ";
};
use Nobody::PP;
my @stack;
sub main(@);
exit(main(@ARGV));
my %skip;
BEGIN {
  %skip = map { $_, 1 } qw( . .. .git );
}
sub debug {
	return 0;
}
sub proc_dir($);
sub proc_dir($){
  my ($path)=shift;
  my ($hand);
  no autodie qw(opendir);
  if(!opendir($hand,"$path")) {
    warn("opendir:$path:$!\n");
    return;
  }
  if(defined($hand) && fileno($hand)){
    my @list = grep { !$skip{$_} } readdir($hand);
    closedir($hand);
    my (@dlist);
    for(@list){
      next if m{~$};
      print STDERR "\t$_" if debug;
      if(-l "$path/$_"){
        print "$path/$_/ is link";
      } elsif(-d "$path/$_"){
        push(@dlist,$_) unless $_ eq "build";
      } else {
        die "is dir!" if -d "$path/$_/";
        print "$path/$_";
      }
    };
    for(@dlist){
      do_dir($_);
    }
    pop(@stack);
  }
}
sub do_dir($);
sub do_dir($){
  my ($name)=shift;
  for($name){
    while(length){
      last unless s{/$}{};
    }
  };
  if($name eq '.'){
    die "name=., stack not empty" if @stack;
    my ($pwd)=map { split } qx(pwd -P);
    my (@pwd)=map { split(m{/+}); } $pwd; 
    for(my $i=0;$i<@pwd;$i++){
      local($_)=$pwd[$i];
      delete $pwd[$i--] if m{^[.]$};
    }
    $name=pop(@pwd);
    ddx({pwd=>\@pwd, name=>$name});
    push(@stack,join("/",@pwd));
  } elsif ( length($name)==0 ) {
    die "name is empty";
  };
  push(@stack,$name);
  my ($path)=join("/",@stack);
  print STDERR "path=$path" if debug;
  proc_dir($path);
}
sub main(@){
  my @dirs;
  while(@_){
    local ($_)=shift;
    die "no args accepted" if m{^-};
    die "not a dir" unless -d;
    push(@dirs,$_);
  };
  for(@dirs){
    ($_)=map { split } qx(cd "$_" && pwd -P);
  };
  do_dir($_) for @dirs;
  return 0;
}
