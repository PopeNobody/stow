#!/usr/bin/perl
$|++;

use strict;
use warnings;
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
  $|++;
  $\="\n"; $,=" "; $"=" ";
};
use autodie qw(:all);
use Getopt::WonderBra;
use File::Basename;
use File::Copy;

use vars qw( %data );
$data{fn}="/var/cache/apt/apt-file-search-slash";

sub help {
  print join("",<DATA>);
};
sub set_type() {
  die "type already specified, got '$_'" if defined($data{type});
  $data{type}=$_;
};

sub version {
  print "$0 version 0.2.0\n";
};
sub main(@);
use Getopt::WonderBra;
exit(main(@ARGV));
die "wtf?";



sub loop($) {
	my $qr=shift;
	open(STDIN,"<$data{fn}");
	if( $data{type} eq 'file' ) {
		while(<STDIN>){
      next unless m{:.*$qr};
			chomp;
			my ($pkg,$file) = m{^(\S+):\s+(\S.*\S)};
			print if $file=~m{$qr};
		};
	} elsif ( $data{type} eq 'package' ) {
		while(<STDIN>){
      next unless m{$qr.*:};
			chomp;
			my ($pkg,$file) = m{^(\S+):\s+(\S.*\S)};
			print if $pkg=~m{$qr};
		};
	} elsif ( $data{type} eq 'line' ) {
		while(<STDIN>){
			next unless m{$qr};
			chomp;
      print;
		};
  } elsif ( $data{type} eq 'dir' ) {
	} else {
		die "idk how to handle $data{type}";
	};
	close(STDIN);
	die "$@" if "$@";
	open(STDIN,"</dev/null");
	return 0;
};
sub main(@)
{
	local $_;
	$_=undef for @data{ qw( qr type ) };
  our(@_);
	$data{orig}=[@_];
	@_=getopt('uUwpflzdD',@_);
  $data{prod}=[@_];
  my @pat;
  while(($_=shift(@_))ne'--')
  {
    die "too many flags, last was $_" if defined $data{type};

    if(/^-r$/){
      die "-r as last arg!" unless @_;
      push(@{$data{pats}},shift);
    } elsif ( /^-[dD]$/ ) {
    $data{type}=$_;
    if(/^-[dD]$/){
      $data{pattern}=
    };
  }
  
	die "need pattern" unless @_;
  $data{pr}=[ map { qr{$a} } @_ ];
	$data{qr}=shift;
	$data{qr}=qr{$data{qr}};


	$data{type}='line' unless defined $data{type};
	return loop($data{qr});

};

sub update() {
	if(grep { defined } map { $data{$_} } qw(type whole qr ))
	{
		die "update should be used alone."
	};
	open(STDOUT,">$data{fn}.new");
	open(STDIN,"apt-file search /|ts");
	local($\)="";
  print "\n";
	rename("$data{fn}",     "$data{fn}.old");
	rename("$data{fn}.new", "$data{fn}"    );
	return 0;
};
__DATA__
usage: - [-ud] [-p qr | -f qr]
       -u update:   our cache file, using apt-file
       -p package:  match our regex against the pkg side
       -f file:     match our regex agaisnt the file side
       -l line:     match our regex against the line side
       -d           use the pwd, anchored on the left, as your pattern
       -D           do the same, but don't anchor the pattern.
       -r           add the following token to the regex list
