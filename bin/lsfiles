#!/usr/bin/perl
# vim: sw=2 ts=2
use strict;
use warnings;
<<<<<<< HEAD
BEGIN {
  use FindBin qw($Bin $Script);
  use lib "$Bin/../lib/perl";
};
use autodie qw(:all);
use Data::Dump qw(ddx ppx dd pp);
use Getopt::WonderBra;
use File::Basename;
use File::stat qw(:FIELDS);
=======
use autodie qw(:all);
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
};
use Data::Dumper;
use Getopt::WonderBra;
use File::Basename;
use File::Copy;
>>>>>>> church
use Carp qw(cluck);

sub help() {
  print "$0 [ -n ] <files>\n";
};
sub version() {
  print "$0 version 0.2\n";
};
sub debug(@){
}

my $test;
my $neg=0;
my $cluck=0;
my $glob;

debug("script: $Script\n");
sub is_mount() {
  system("mountpoint $_ >/dev/null 2>&1");
  if($?) {
    return 0;
  } else {
    return 1;
  }
}
for($Script) {
  if(/^lsfiles$/){
    $test="-f";
  } elsif ( /^lsdirs$/ ) {
    $test="-d";
  } elsif ( /^lslinks$/ ) {
    $test="-l";
  } elsif ( /^lsexist$/ ) {
    $test="-e";
  } elsif ( /^lsmounts$/ ) {
    $test="is_mount()";
  } else {
    print "name not recognized.  no default test";
  }
}
debug("test: $test\n");
@ARGV = getopt( 'fdnlecg', @ARGV );
while ( ( $_ = shift ) ne '--' )
{
  if ( /^-[fdlem]$/ ) {
    die "repeated specification of -[fdle]" if defined $test && $test ne $_;
    $test="$_ \$_";
  } elsif ( /^-g$/ ) {
    $glob=1;
  } elsif ( /^-c$/ ) {
    $cluck=1;
  } elsif ( /^-n$/ ) {
    cluck "warning:  double-negative" if $neg;
    $neg=!$neg;
  } else {
    die "I do not grok -", $_;
  };
};
$test="!($test)" if( $neg );
if(!@ARGV) {
  if ( -t STDIN ) {
    print STDERR "reading terminal for items: ";
  } else {
    print STDERR "reading items: ";
  }
  @ARGV=map { split } grep { chomp || 1 } <STDIN>;
  printf STDERR "%d items:\n", scalar(@ARGV);
};
@ARGV = grep { chomp || length } <STDIN> unless(@ARGV);
if($glob){
  @ARGV = map { glob($_) } @ARGV;
};
for(@ARGV) {
  if($cluck) {
    cluck "$_\n" if eval $test;
  } else {
    print "$_\n" if eval $test;
  };
};
