#!/usr/bin/perl
# vim: sw=2 ts=2
use common::sense;
BEGIN {
  use FindBin qw($Bin $Script);
  use lib "$Bin/../lib/perl";
};
use autodie;
use Nobody::Util;
use Getopt::WonderBra;
use File::Basename;
use File::stat qw(:FIELDS);

sub help() {
  print "$0 [ -n ] <files>\n";
};
sub version() {
  print "$0 version 0.2\n";
};
sub debug(@){
}

my $type=undef;
my $neg=0;
my $glob;
my $words=1;
my $links;

debug("script: $Script\n");
sub is_mount() {
  system("mountpoint -q $_ >/dev/null 2>&1");
  if($?) {
    return 0;
  } else {
    return 1;
  }
}
my (%opts) = (
  f => { type=>'file', name=>'lsfiles', test=>'-f' },
  d => { type=>'dir', name=>'lsdirs', test=>'-d' },
  l => { type=>'link', name=>'lslinks', test=>'-l' },
  c => { type=>'char', name=>'lscdevs', test=>'-c' },
  b => { type=>'block', name=>'lsbdevs', test=>'-b' },
  S => { type=>'socket', name=>'lssocks', test=>'-S' },
  e => { type=>'any', name=>'lsany', test=>'-e' },
  m => { type=>'mountpoint', name=>'lsmounts', test=>'is_mount' },
  g => sub { $glob=!$glob; },
  n => sub { $neg=!$neg; },
  w => sub { $words=!$words; },
  h => sub { $links=1; },
  H => sub { $links=0; }
);
my $opts = join("",sort keys %opts);
@ARGV = getopt( $opts, @ARGV );
for(keys %opts) {
  my $opt=$opts{$_};
  next unless ref($opt) eq 'HASH';
  if($opt->{name} eq $Script) {
    $type=$opt;
    last;
  }
};
while ( ( $_ = shift ) ne '--' )
{
  die "expected leading dash" unless s{^-}{};
  my $opt = $opts{$_};
  if(!defined($opt)) {
    die "I do not grok flag '$_'";
  } elsif ( ref($opt) eq 'HASH' ) {
    die "repeated type" if (defined $type);
    $type=$opt;
  } else {
    $opt->();
  }
};
die "no type found" unless defined($type) && defined($type->{test});
our(@list);
my $test=$type->{test};
push(@list,$test);
$test="!($test)" if( $neg );
if(defined($links)) {
  if($type->{type} eq 'link') {
    die "-h and -H make no sense for lslinks or lsany -l";
  };
  $test="($test) and ";
  if(!$links){
    $test=$test." not ";
  };
  $test=$test."-l";
};
if(!@ARGV) {
  if ( -t STDIN ) {
    print STDERR "enter items" if -t STDERR;
  } else {
    print STDERR "reading items: " if -t STDERR;
  }
  chomp(@ARGV=<STDIN>);
  if($words) {
    @ARGV = map { split } @ARGV;
  };
  STDERR->printf("%d items:\n", scalar(@ARGV)) if -t STDERR;
};
if($glob){
  @ARGV = map { glob($_) } @ARGV;
};
for(@ARGV) {
  print "$_\n" if eval $test;
};
