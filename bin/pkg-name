#!/usr/bin/perl

use strict;
use warnings;
$|++;
use FindBin qw($Bin);
use lib "$Bin/../lib/perl";
use autodie qw(:all);
use Nobody::Util;
sub main(@);
use Getopt::WonderBra;
our($type,$re,$pre_re);
main(@ARGV);
exit(0);
sub get_os_type() {
  local (@_);
  @_ = map { split } qx(os);
  return shift;
};
BEGIN {
  my $type = get_os_type();
  my %cmd = (
    void=> "xbps-query -s . -R",
    alpine=>"apk list",
    debian=>"apt-cache pkgnames",
    ubuntu=>"apt-cache pkgnames",
    linuxmint=>"apt-cache pkgnames",
  );
  my $cmd=$cmd{$type};
  sub fork_source($) {
    my $pid = open(STDIN,"-|");
    return if $pid;
    exec "$cmd";
    die "exec:$cmd:$!";
  };
}
sub fork_split($) {
  return if open(STDIN,"-|");
  if($_[0] eq 'void') {
    while(<STDIN>){
      s{^\s*\S+\s+}{};
      next unless @_=m{(\S*)(-(alpha|)[Bv0-9]\S+)};
      print shift;
    }
  } else {
    while(<STDIN>){
      chomp;
      print for split;
    }
  }
  close(STDIN);
  close(STDOUT);
  exit(0);
};
sub fork_filter() {
  my $pid = open(STDIN,"-|");
  return if $pid;
  while(<STDIN>){
    chomp;
    if(defined($pre_re)) {
      next unless m{$pre_re};
    };
    print if !defined($re) or m{$re};
  };
  exit(0);
};
our(@VERSION) = qw( 0 5 0 );
sub version {
  local($,)=".";
  print "pkg_name(@VERSION)";
}
sub help {
  $\=undef;
  print for <DATA>;
}
sub main(@) {
  @_=getopt("wr:d",@_);
  @_=do_opts(@_);
#      ddx( { re=>$re, re=>$type, pre_re=>$pre_re, _=>\@_ } );
  unless(defined $type) {
    $type = @_>1 ? "words" : "regex";
  }
  if($type eq "words") {
    $re=join("|",map qq{\Q$_\E}, @_);
  } elsif ( $type eq "regex" ) {
    die ">1 regex" if @_>1;
    $re = shift;
  }  else {
    die "no type"
  };
#      ddx( { re=>$re, re=>$type, pre_re=>$pre_re, _=>\@_ } );
  fork_source(get_os_type());
  fork_filter() if( defined($re || $pre_re ));
  my %seen;
  while(<STDIN>){
    chomp;
    $seen{$_}++ for split;
  }
  print for sort keys %seen;
  exit(0);
};
sub do_opts(@) {
  unless(defined wantarray) {
    warn "useless use of do_opts in void context"
  }

  while(($_=shift)ne'--') {
    if(/^-d/) {
      die ">1 -d" if defined $pre_re;
      $pre_re=qr{-dev$};
    } elsif ( /^-r/ ) {
      die "-w or -r repeated regex" if defined($type);
      $type="regex";
      push(@_,shift);
    } elsif ( m{^-w} ) { 
      die "-w or -r repeated regex" if defined($type);
      $type="words";
    }
  }
  return @_;
}
__DATA__
pkg-name:  [-d] { [ -w word ... ] | [ -r regex ] }

list package names that contain a substring or regex
  -w:  remaining args are words, match any of them
  -d:  development packackes only
       implemented only for apt based systems.
       return only those names that end in -dev
  -r:  remaining arg is a (perl) regex.
