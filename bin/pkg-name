#!/usr/bin/perl

use strict;
use warnings;
$|++;
use FindBin qw($Bin);
use lib "$Bin/../lib/perl";
use autodie qw(:all);
use Util;
sub main();
main;
exit(0);
sub get_os_type() {
  local (@_);
  @_ = map { split } qx(os);
  return shift;
};
BEGIN {
  my $type = get_os_type();
  my %cmd = (
    void=> "xbps-query -s . -R",
    alpine=>"apk list",
    debian=>"apt-cache pkgnames",
    ubuntu=>"apt-cache pkgnames",
    linuxmint=>"apt-cache pkgnames",
  );
  my $cmd=$cmd{$type};
  sub fork_source($) {
    my $pid = open(STDIN,"-|");
    return if $pid;
    exec "$cmd";
    die "exec:$cmd:$!";
  };
}
sub fork_split($) {
  return if open(STDIN,"-|");
  if($_[0] eq 'void') {
    while(<STDIN>){
      s{^\s*\S+\s+}{};
      next unless @_=m{(\S*)(-(alpha|)[Bv0-9]\S+)};
      print shift;
    }
  } else {
    while(<STDIN>){
      chomp;
      print for split;
    }
  }
  close(STDIN);
  close(STDOUT);
  exit(0);
};
sub fork_filter(@) {
  my $pid = open(STDIN,"-|");
  return if $pid;
  my $re = join("|",@_);
  $re=qr($re);
  while(<STDIN>){
    chomp;
    print if /$re/;
  };
  exit(0);
};
sub main() {
  fork_source(get_os_type());
  @_ = @ARGV;
  fork_filter(@_) if(@_);
  my %seen;
  while(<STDIN>){
    chomp;
    $seen{$_}++ for split;
  }
  print for sort keys %seen;
  exit(0);
};
