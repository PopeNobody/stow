#!/usr/bin/perl

use strict;
use warnings;
our($Lib);
BEGIN {
  use FindBin qw($Bin);
  use lib ($Lib="$Bin/../lib/perl");
};
use autodie qw(:all);
use Getopt::WonderBra;
use Data::Dump qw(dd);
use File::Basename;
use File::Copy;
use File::stat;
use Fcntl ':mode';
use Cwd qw(getcwd realpath);
sub debug {
  return 1;
};
$|++;
sub get_path();
sub proc_argv(@);
our($debug, @cmd, @script);
$debug = 0;
push(@cmd,map { split } grep {defined} $ENV{VISUAL}) unless @cmd;
push(@cmd,map { split } grep {defined} $ENV{EDITOR}) unless @cmd;

die "no \@cmd" unless @cmd;

help(2) unless @script = proc_argv(@ARGV);
print dd(\@script);
exec(@cmd, @script);
die "exec failed";

## subs
sub get_path() {
  my (@path,%seen);
  for( split(/:/,$ENV{PATH}) )
  {
    my $stat=stat($_);
    if(!defined($stat)) {
      warn("stat:$_:$!") if $debug;
      next;
    };
    unless( -d $stat ) {
      warn("$_ is not a dir") if $debug;
      next;
    };
    my $unid = sprintf("%08x:%08x",$stat->dev,$stat->ino);
    if( defined($seen{$unid}) ) {
      warn("$_ seen before") if $debug;
      next;
    };
    $seen{$unid}=1;
    push(@path,$_);
  };
  return @path;
}
sub proc_argv(@) {
  local @_=getopt("dc:",@_);
  my (%seen);
  while( ($_=shift) ne '--' )
  {
    if( m{^-c$} ) {
      die ">1 command specified" if $seen{-c}++;
      @cmd=map { split } shift;
    } else {
      die "I don't grok '$_'";
    };
  };
  die "no command to search for!" unless @ARGV;
  return find_scripts(@_);
}
sub help {
  print "usage: $0 [-c cmd] script";
}
sub version {
  print "pvi version 0.5.0";
}
sub find_scripts(){
  my $script=shift;
  my %script;
  for( get_path() ) {
    my $fname="$_/$script";
    print STDERR "fname=$fname\n" if debug;
    $fname=realpath($fname);
    print STDERR "fname=$fname\n" if debug;
    next unless -f $fname;
    $script{$fname}=1+(keys %script);
  };
  return sort { $script{$a} <=> $script{$b} } keys %script;
}
