#!/usr/bin/perl
 
use strict;
use warnings;
<<<<<<< HEAD
use autodie qw(:all);
BEGIN {
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
  $|++;
  $\="\n"; $,=" "; $"=" ";
};
use Getopt::WonderBra;
=======
>>>>>>> church

our($dry_run, $debug, $link, $replace);
($dry_run, $debug, $link, $replace) = qw( 1 0 1 1 );


sub handle_args();
sub debug {
	print STDERR @_, "\n" if $debug;
};
sub xrename($$) {
    my $from=shift or die;
    my $to=shift or die;
    die "too many args" if @_;
    if($dry_run) {
        print ("$from =>\n  $to") if $dry_run;
        return $from;
    }else{
				rename($from,$to) or die "rename:$from,$to:$!";
        return $to;
    };
};
sub fix_name($)
{
	for(shift)
  {
<<<<<<< HEAD
    return $_ unless s/[^.a-zA-Z0-9%:+-]/_/g;
=======
    return $_ unless s/[^.a-zA-Z0-9-]/_/g;
>>>>>>> church
    use Data::Dumper;
    s/__+/_/g;
    return $_;
	};
  die "no arg for fix_name!";
};
<<<<<<< HEAD
sub version {
  print "usage: $0 version 1.0.0";
};
sub help {
  print "usage: $0 -[yd]";
  print "   -y:  yes, do it ( dry run otherwise )";
  print "   -d:  debug";
};
sub handle_args()
{
  use Getopt::WonderBra;
  local (@_)=getopt("yd",@ARGV);
  while($_[0] ne '--')
  {  
    for(shift) {
      if (/^-y$/){
        $dry_run=0;
      } elsif ( /^-d/ ) {
        $debug=1;
      };
    };
  };
  shift;
  @ARGV=@_;
};
sub main
{
  handle_args;
  open(STDERR,">&STDOUT") if $dry_run;
  my @dir;
  push(@dir, @ARGV);
  push(@dir,$ENV{PWD}) unless @dir;
  my @todo;
  $\="\n";
  while(@dir) {
    my $dir=shift @dir;
    my @dents=do{
      opendir(my $dh, $dir) || die "open:$dir:$!";
      local @_=readdir($dh) or die "readdir:$dir:$!";
      closedir($dh) or die "closedir:$dh:$!";
      @_ = grep { !m{^\.\.?$} } @_;
      @_;
    };
    for(@dents) {
      my $is_dir=0;
      my $orig=$_;
      my $dest=fix_name($_);
      my $forig="$dir/$orig";
      my $fdest="$dir/$dest";
      if( $orig ne $dest ) {
        if( -e $dest ) {
          warn "will not clobber $dest with $orig\n";
          next;
        };
        xrename($forig,$fdest);
      };
      if( -d "$forig" ) {
        if($dry_run) {
          push(@dir,"$forig");
        } else {
          push(@dir,"$fdest");
        };
      };
    };
  };
  if($dry_run){
    print "\nuse -y to actually move files\n";
  };
};
=======
sub handle_args()
{
  local (@_)=splice(@ARGV);
  for(@_)
  {  
    if (/^-y$/){
      $dry_run=0;
    } elsif ( /^-d/ ) {
      $debug=1;
    } else {
      push(@ARGV,$_);
    };
  };
};
sub main
{
  handle_args;
  open(STDERR,">&STDOUT") if $dry_run;
  $debug=1 if $dry_run;
  my @dir;
  push(@dir, @ARGV || $ENV{PWD} );
  my @todo;
  $\="\n";
  while(@dir) {
    my $dir=shift @dir;
    my @dents=do{
      opendir(my $dh, $dir) || die "open:$dir:$!";
      local @_=readdir($dh) or die "readdir:$dir:$!";
      closedir($dh) or die "closedir:$dh:$!";
      @_ = grep { !m{^\.\.?$} } @_;
      @_;
    };
    for(@dents) {
      my $orig=$_;
      my $dest=fix_name($_);
      my $forig="$dir/$orig";
      my $fdest="$dir/$dest";
      if( -d "$forig" ) {
        push(@dir,"$forig");
      };
      next if $orig eq $dest;
      next if -l $forig && readlink($forig) eq $dest;
      if( -e $dest ) {
        warn "will not clobber $dest with $orig\n";
        next;
      };
      xrename($forig,$fdest);
    };
  };
};
>>>>>>> church
main;
